///BRING IN THE ROSS FOR THE CLOUDS
//ROSSAW IS READY



// //Importing imagery from Landsat 7 and creating TCC and FCCs from the data
// var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_RT')
//                   .filterDate('1999-01-01', '2002-12-31');
// var trueColor321 = dataset.select(['B3', 'B2', 'B1']);
// var trueColor321Vis = {};

// var falseColor432 = dataset.select(['B4', 'B3', 'B2']);
// var falseColor432FCC = {}

// Map.setCenter(6.746, 46.529, 6);
// Map.addLayer(falseColor432, falseColor432FCC, 'False Color (432)');
// Map.addLayer(trueColor321, trueColor321Vis, 'True Color (321)');


var laughingbrook = ee.FeatureCollection(table);
laughingbrook = laughingbrook.geometry();
var sitebuffer = laughingbrook.buffer(3000);

Map.setCenter(-72.404487, 42.064625, 13);
Map.addLayer(laughingbrook, {}, 'default display');
Map.addLayer(laughingbrook, {color: 'FF0000'}, 'colored', false);


var cloud_filtered = function(image) {
  var qa = image.select('pixel_qa');
  // If the cloud bit (5) is set and the cloud confidence (7) is high
  // or the cloud shadow bit is set (3), then it's a bad pixel.
  var cloud = qa.bitwiseAnd(1 << 5)
                  .and(qa.bitwiseAnd(1 << 7))
                  .or(qa.bitwiseAnd(1 << 3));
  // Remove edge pixels that don't occur in all bands
  var mask2 = image.mask().reduce(ee.Reducer.min());
  return image.updateMask(cloud.not()).updateMask(mask2);
};


// // Get the least cloudy image in Image.
// var cloud_filtered = ee.Image(
//   dataset.filterBounds(centroid)
//     .filterDate('2002-04-01', '2002-04-30')
//     .sort('CLOUD_COVER')
//     .first()
// );


//Brought in Landsat 7 imagery corrected for atmosphere 'SR'
var dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR').filterDate('2002-06-01', '2002-07-30').map(cloud_filtered);
var visParams = {
  bands: ['B3', 'B2', 'B1'],
  min: 0,
  max: 3000,
  gamma: 1.4,
};

var dataset_med = dataset.median();
Map.setCenter(-72.404487, 42.064625, 13);
Map.addLayer(dataset_med, visParams, 'TCC_Summer', false);

print(dataset_med)

//Define Merge for Classes
var newfc = Urban_residential.merge(Pasture).merge(Conciferous).merge(Deciduous);
print(newfc,'newfc')


// Use these bands for classification
var bands = ['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7'];
// The name of the property on the points storing the class label


// Sample the composite to generate training data.  Note that the
// class label is stored in the 'landcover' property
var training = dataset_med.select(bands).sampleRegions({
  collection: newfc,
  properties: ['Landcover'],
  scale: 30
});


print(training)

// Train a Random Forest classifier.
var classifier = ee.Classifier.randomForest().train({
  features: training,
  classProperty: 'Landcover',
  inputProperties: bands
});


// // Classify the input imagery.

var classified = dataset_med.select(bands).classify(classifier);
var classified_clip = classified.clip(sitebuffer);

 //Define a palette for the Land Use classification.
var palette = [
  '00ff00', // Deciduous (0)  // Light Green
  '008000', // Conciferous (1) // Dark Green
  'yellow', // Pasture (2)  // Orange
  'blue', // Urban_residential (3)  // TEAL
];

// //Create band for binary landcovers -- Effectively the spectral class creation in TerrSet
// var deciduous  = classified.eq(1).select([0], ['Deciduous']);
// var deciduousArea  = deciduous.multiply(ee.Image.pixelArea());


// print(deciduousArea)

// var urban = classified.eq(1).select([0], ['Conifer']);
// var other = classified.eq(0).select([0],['Other']);
// var coniferousArea  = coniferous.multiply(ee.Image.pixelArea());

// var deciduous = classified.eq(1).select([0], ['Conifer']);
// var other = classified.eq(0).select([0],['Other']);
// var coniferousArea  = coniferous.multiply(ee.Image.pixelArea());

// var pasture = classified.eq(1).select([0], ['Conifer']);
// var other = classified.eq(0).select([0],['Other']);
// var coniferousArea  = coniferous.multiply(ee.Image.pixelArea());


// //add classified image to map
// Map.addLayer(classified.clip(region),{min:0, max:1, palette: ['000000', '00FF00']}, 'color composite', false)


// //Mask out areas that aren't conifers
// var classifiedMask = coniferous.updateMask(coniferous);
// //Add supervised classification of just conifers to map from Mask
// Map.addLayer(classifiedMask.clip(region), {min: 0, max: 1, palette: ['White', 'Green']}, 'MA Conifers');


// Display the classification result and the input image.
Map.setCenter(-72.404487, 42.064625, 13);
Map.addLayer(classified_clip, {min: 0, max: 3, palette: palette}, 'Land Use Classification');


var dataset_winter = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR').filterDate('2002-01-01', '2002-03-15').map(cloud_filtered);
var visParams = {
  bands: ['B3', 'B2', 'B1'],
  min: 0,
  max: 3000,
  gamma: 1.4,
};

var dataset_med_winter = dataset_winter.median();


var centroid = laughingbrook.centroid();
Map.addLayer(centroid, {}, 'centroid');

// // Get the least cloudy image in Image.
// var cloud_filtered_image = ee.Image(
//   dataset.filterBounds(centroid)
//     .filterDate('2002-04-01', '2002-04-30')
//     .sort('CLOUD_COVER')
//     .first()
// );


// Create a circle by drawing a 20000 meter buffer around a point.
//var roi = geometry.buffer(8000);  

//Compute a 3000m buffer of the polygon.
var sitebuffer = laughingbrook.buffer(3000);



// Display a clipped version of the TCC.
var clipped = dataset_med.clip(sitebuffer);
Map.addLayer(clipped, visParams, 'Clipped Image_TCC', false);
print(clipped)


// Display a clipped version of the Winter TCC.
var clipped_winter = dataset_med_winter.clip(sitebuffer);
Map.addLayer(clipped_winter, visParams, 'Clipped Image_TCC_Winter', false);
print(clipped_winter)





//Map.addLayer(cloud_filtered_image.clip(sitebuffer));


//Created a false color composite of the Summer Image 
var fcc432 = dataset_med.select(['B4', 'B3', 'B2']);
var fcc432vizparams = { 
    min: 0,
    max: 3000,
    gamma: 1.4,};


// Display a clipped version of the FCC.
Map.setCenter(-72.404487, 42.064625, 13);
Map.addLayer(fcc432.clip(sitebuffer), fcc432vizparams, 'False Color (432)_Summer', false);


//Created a false color composite of the Winter Image 
var fcc432_Winter = dataset_med_winter.select(['B4', 'B3', 'B2']);
var fcc432vizparams_winter = { 
    min: 0,
    max: 3000,
    gamma: 1.4};



// Display a clipped version of the FCC.
Map.setCenter(-72.404487, 42.064625, 13);
Map.addLayer(fcc432_Winter.clip(sitebuffer), fcc432vizparams_winter, 'False Color (432)_Winter', false);







// Map.centerObject(image, 9);
// var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
// Map.addLayer(ndvi, ndviParams, 'NDVI image');



//Imported the data into GEE and added it to the map coloring it in red. 

var laughingbrook = ee.FeatureCollection(table);
laughingbrook = laughingbrook.geometry();


Map.setCenter(-72.404487, 42.064625, 13);
Map.addLayer(laughingbrook, {}, 'default display');
Map.addLayer(laughingbrook, {color: 'FF0000'}, 'colored');



// Compute the Normalized Difference Vegetation Index (NDVI).
// var nir = dataset_med.select('B4');
// var red = dataset_med.select('B3');
// var ndvi = nir.subtract(red).divide(nir.add(red)).rename('NDVI');

var winter_ndvi = clipped_winter.normalizedDifference(['B4', 'B3']);


// Display the result.
Map.centerObject(laughingbrook, 12);
var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(winter_ndvi, ndviParams, 'Winter_NDVI image', false);



// Compute the Normalized Difference Vegetation Index (NDVI) for Winter Months.
// var nir = dataset_med.select('B4');
// var red = dataset_med.select('B3');
// var ndvi = nir.subtract(red).divide(nir.add(red)).rename('NDVI');

var ndvi = clipped.normalizedDifference(['B4', 'B3']);


// Display the result.
Map.centerObject(laughingbrook, 12);
var ndviParams = {min: 0, max: 1, palette: ['red', 'Yellow', 'Green']};
Map.addLayer(ndvi, ndviParams, 'NDVI image', false);



// Compute the Normalized Difference Water Index (NDWI).
var ndwi = clipped.normalizedDifference(['B4', 'B5']);

// Display the result.
Map.centerObject(laughingbrook, 12);
var ndwiParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(ndwi, ndwiParams, 'NDWI image', false);




// Compute the Normalized Difference Built-In Index (NDBI).
var ndbi = clipped.normalizedDifference(['B5', 'B4']);

// Display the result.
Map.centerObject(laughingbrook, 12);
var ndbiParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
Map.addLayer(ndbi, ndbiParams, 'NDBI image', false);



// Compute the EVI using an expression.
var evi = clipped.expression(
    '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
      'NIR': clipped.select('B4'),
      'RED': clipped.select('B3'),
      'BLUE': clipped.select('B1')
});

//Define 
var eviParams = {min: 0, max: 3, palette: ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
    '012E01', '011D01', '011301']};


// Display the result.
Map.centerObject(laughingbrook, 12);
Map.addLayer(evi, eviParams, 'EVI', false);
    


// Compute a 500m buffer of the polygon.
var buffer500 = laughingbrook.buffer(500);

//Compute a 1000m buffer of the polygon.
var buffer1000 = laughingbrook.buffer(1000);
// 500m, 1000m, 1500m, 2000m, 2500m, 3000m buffers 

//Compute a 1500m buffer of the polygon.
var buffer1500 = laughingbrook.buffer(1500);

//Compute a 2000m buffer of the polygon.
var buffer2000 = laughingbrook.buffer(2000);

//Compute a 2500m buffer of the polygon.
var buffer2500 = laughingbrook.buffer(2500);

//Compute a 3000m buffer of the polygon.
var buffer3000 = laughingbrook.buffer(3000);



// Compute the centroid of the polygon.
//var centroid = laughingbrook.centroid();
//Map.addLayer(centroid, {}, 'centroid');

//Add Buffer layers 
Map.addLayer(buffer500, {}, 'buffer500', false);
Map.addLayer(buffer1000, {color: 'red'}, 'buffer1000', false);
Map.addLayer(buffer1500, {color: 'yellow'}, 'buffer1500', false);
Map.addLayer(buffer2000, {color: 'blue'}, 'buffer2000', false);
Map.addLayer(buffer2500, {color: 'orange'}, 'buffer2500', false);
Map.addLayer(buffer3000, {}, 'buffer3000', false);

// // Defined a palette for the 18 distinct land cover classes.
// var LBPalette = [
//   'aec3d4', // water
//   '152106', '225129', '369b47', '30eb5b', '387242', // forest
//   '6a2325', 'c3aa69', 'b76031', 'd9903d', '91af40',  // shrub, grass
//   '111149', // wetlands
//   'cdb33b', // croplands
//   'cc0013', // urban
//   '33280d', // crop mosaic
//   'd7cdcc', // snow and ice
//   'f7e084', // barren
//   '6f6f6f'  // tundra
// ];

// // Specified the min and max labels and the color palette matching the labels.
// Map.setCenter(laughingbrook, 12);
// Map.addLayer(cover,
//             {min: 0, max: 17, palette: LBPalette},
//             'Laughing Brook classification');
             

var centroid = laughingbrook.centroid();
Map.addLayer(centroid, {}, 'centroid');




// Create a geometry representing an export region.

// // Export the image, specifying scale and region.
Export.image.toDrive({
  image: classified,
  description: 'Classified_Images',
  scale: 30,
  region: sitebuffer
});

// Export a cloud-optimized GeoTIFF.
Export.image.toDrive({
  image: dataset_med,
  description: 'TCC_Images',
  scale: 30,
  region: sitebuffer,
  fileFormat: 'GeoTIFF',
  formatOptions: {
    cloudOptimized: true
  }
});





// ACCURACY ASSESSMENT:
var withRandom = training.randomColumn();
print(withRandom);

// Approximately 70% of our training data
var trainingPartition = withRandom.filter(ee.Filter.lt('random', 0.7));
// Approximately 30% of our training data
var testingPartition = withRandom.filter(ee.Filter.gte('random', 0.7));

// Trained with 70% of our data.
var trainedClassifier = ee.Classifier.randomForest().train({
  features: trainingPartition, 
  classProperty: 'Landcover', 
  inputProperties: bands
});

var test = testingPartition.classify(trainedClassifier);
print(test);

var confusionMatrix = test.errorMatrix('Landcover', 'classification');
print(confusionMatrix);


// CHART RESULTS:
var options = {
  lineWidth: 1,
  pointSize: 2,
  hAxis: {title: 'Classes'},
  vAxis: {title: 'Area m^2'},
  title: 'Area by class',
  series: {
    0: { color:'00ff00'},
    1: { color: '008000'},
    2: { color: 'yellow'},
    3: { color: 'blue'}
  }
};




// '00ff00', // Deciduous (0)  // Light Green
// '008000', // Conciferous (1) // Dark Green
//  'yellow', // Pasture (2)  // Orange
//  'blue', // Urban_residential (3)  // TEAL


// Pre-define some customization options.
var options1 = {
  title: 'Landsat 7 DN histogram, bands 1-7',
  fontSize: 20,
  hAxis: {title: 'DN'},
  vAxis: {title: 'count of DN'},
  series: {
    0: {color: 'blue'},
    1: {color: 'green'},
    2: {color: 'red'},
    3: {color: 'magenta'},
    4: {color: 'orange'},
    5: {color: 'purple'},
    6: {color: 'yellow'}
  }};

// Make the histogram, set the options.
var histogram = ui.Chart.image.histogram(clipped, sitebuffer, 20, 20)
    .setSeriesNames(['blue', 'green', 'red', 'NIR', 'SWIR', "SWIR2", "Thermal"])
    .setOptions(options1);

// Display the histogram.
print(histogram);



// // Reduce the region. The region parameter is the Feature geometry.
// var meanDictionary = clipped.reduceRegion({
//   reducer: ee.Reducer.mean(),
//   geometry: region.geometry(),
//   scale: 30,
//   maxPixels: 1e9
// });

// // The result is a Dictionary.  Print it.
// print(meanDictionary);


print("Total Meters Squared of site", ee.Image.pixelArea().addBands(classified_clip));


//Area Chart 3000m
var areaChart = ui.Chart.image.byClass({
  image: ee.Image.pixelArea().addBands(classified_clip),
  classBand: 'classification', 
  region: buffer3000,
  scale: 30,
  reducer: ee.Reducer.sum()
}).setSeriesNames(['Deciduous', 'Conciferous', 'Pasture', 'Urban_residential']).setOptions(options);

print('3000m Buffer area: ',areaChart)

// Print polygon area in square kilometers.
print('3000m Buffer area in meters squared: ', sitebuffer.area());


//Area Chart 2500m
var areaChart_2500 = ui.Chart.image.byClass({
  image: ee.Image.pixelArea().addBands(classified_clip),
  classBand: 'classification', 
  region: buffer2500,
  scale: 30,
  reducer: ee.Reducer.sum()
}).setSeriesNames(['Deciduous', 'Conciferous', 'Pasture', 'Urban_residential']).setOptions(options);



print('2500m Buffer area: ', areaChart_2500);

// Print polygon area in square kilometers.
print('2500m Buffer area in meters squared: ', buffer2500.area());

//Area Chart 2000m
var areaChart_2000 = ui.Chart.image.byClass({
  image: ee.Image.pixelArea().addBands(classified_clip),
  classBand: 'classification', 
  region: buffer2000,
  scale: 30,
  reducer: ee.Reducer.sum()
}).setSeriesNames(['Deciduous', 'Conciferous', 'Pasture', 'Urban_residential']).setOptions(options);


print('2000m Buffer area: ', areaChart_2000);

// Print polygon area in square kilometers.
print('2000m Buffer area in meters squared:: ', buffer2000.area());



//Area Chart 1500m
var areaChart_1500 = ui.Chart.image.byClass({
  image: ee.Image.pixelArea().addBands(classified_clip),
  classBand: 'classification', 
  region: buffer1500,
  scale: 30,
  reducer: ee.Reducer.sum()
}).setSeriesNames(['Deciduous', 'Conciferous', 'Pasture', 'Urban_residential']).setOptions(options);



print('1500m Buffer area in meters squared:: ', areaChart_1500);

// Print polygon area.
print('1500m Buffer area: ', buffer1500.area());

//Area Chart 1000m
var areaChart_1000 = ui.Chart.image.byClass({
  image: ee.Image.pixelArea().addBands(classified_clip),
  classBand: 'classification', 
  region: buffer1000,
  scale: 30,
  reducer: ee.Reducer.sum()
}).setSeriesNames(['Deciduous', 'Conciferous', 'Pasture', 'Urban_residential']).setOptions(options);

print('1000m Buffer area: ',areaChart_1000);

// Print polygon area in square kilometers.
print('1000m Buffer area in meters squared: ', buffer1000.area());


//Area Chart 500m
var areaChart_500 = ui.Chart.image.byClass({
  image: ee.Image.pixelArea().addBands(classified_clip),
  classBand: 'classification', 
  region: buffer500,
  scale: 30,
  reducer: ee.Reducer.sum()
}).setSeriesNames(['Deciduous', 'Conciferous', 'Pasture', 'Urban_residential']).setOptions(options);

print('500m Buffer area: ', areaChart_500);

// Print polygon area in square kilometers.
print('500m Buffer area meters Squared: ', buffer500.area());

//Area Chart Laughing Brook Site
var areaChart_500 = ui.Chart.image.byClass({
  image: ee.Image.pixelArea().addBands(classified_clip),
  classBand: 'classification', 
  region: laughingbrook,
  scale: 30,
  reducer: ee.Reducer.sum()
}).setSeriesNames(['Deciduous', 'Conciferous', 'Pasture', 'Urban_residential']).setOptions(options);

print('Laughing Brook Site area: ', areaChart_500);

// Print polygon area in square kilometers.
print('Laughing Brook Site area meters Squared: ', laughingbrook.area().divide(1000 * 1000));


//MEAN VALUE CALCULATIONS FOR INDICES

//NDVI

// Reduce the region for the Laughing Brook Site. The region parameter is the Feature geometry of the site.
var ndviMean_site = ndvi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: laughingbrook,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Laughing Brook Site NDVI Mean: ',ndviMean_site);

// Reduce the region for the Buffer 3000 site. The region parameter is the Feature geometry of the site.
var ndviMean_buffer3000 = ndvi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer3000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 3000 NDVI Mean: ', ndviMean_buffer3000);




// Reduce the region for the Buffer 2500 site. The region parameter is the Feature geometry of the site.
var ndviMean_buffer2500 = ndvi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer2500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 2500 NDVI Mean: ', ndviMean_buffer2500);


// Reduce the region for the Buffer 2000 site. The region parameter is the Feature geometry of the site.
var ndviMean_buffer2000 = ndvi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer2000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 2000 NDVI Mean: ', ndviMean_buffer2000);


// Reduce the region for the Buffer 1500 site. The region parameter is the Feature geometry of the site.
var ndviMean_buffer1500 = ndvi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer1500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 1500 NDVI Mean: ', ndviMean_buffer1500);

// Reduce the region for the Buffer 1000 site. The region parameter is the Feature geometry of the site.
var ndviMean_buffer1000 = ndvi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer1000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 1000 NDVI Mean: ', ndviMean_buffer1000);




// Reduce the region for the Buffer 500 site. The region parameter is the Feature geometry of the site.
var ndviMean_buffer500 = ndvi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 500 NDVI Mean: ', ndviMean_buffer500);





//NDWI

// Reduce the region for the Laughing Brook Site. The region parameter is the Feature geometry of the site.
var ndwiMean_site = ndwi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: laughingbrook,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Laughing Brook Site NDWI Mean: ', ndwiMean_site);


// Reduce the region for the Buffer 3000 site. The region parameter is the Feature geometry of the site.
var ndwiMean_buffer3000 = ndwi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer3000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 3000 NDWI Mean: ', ndwiMean_buffer3000);




// Reduce the region for the Buffer 2500 site. The region parameter is the Feature geometry of the site.
var ndwiMean_buffer2500 = ndwi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer2500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 2500 NWVI Mean: ', ndwiMean_buffer2500);


// Reduce the region for the Buffer 2000 site. The region parameter is the Feature geometry of the site.
var ndwiMean_buffer2000 = ndwi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer2000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 2000 NDWI Mean: ', ndwiMean_buffer2000);


// Reduce the region for the Buffer 1500 site. The region parameter is the Feature geometry of the site.
var ndwiMean_buffer1500 = ndwi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer1500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 1500 NDWI Mean: ', ndwiMean_buffer1500);

// Reduce the region for the Buffer 1000 site. The region parameter is the Feature geometry of the site.
var ndwiMean_buffer1000 = ndwi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer1000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 1000 NDWI Mean: ', ndwiMean_buffer1000);




// Reduce the region for the Buffer 500 site. The region parameter is the Feature geometry of the site.
var ndwiMean_buffer500 = ndwi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 500 NDWI Mean: ', ndwiMean_buffer500);





//NDBI

// Reduce the region for the Laughing Brook Site. The region parameter is the Feature geometry of the site.
var ndbiMean_site = ndbi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: laughingbrook,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Laughing Brook Site NDBI Mean: ', ndbiMean_site);


// Reduce the region for the Buffer 3000 site. The region parameter is the Feature geometry of the site.
var ndbiMean_buffer3000 = ndbi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer3000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 3000 NDBI Mean: ', ndbiMean_buffer3000);




// Reduce the region for the Buffer 2500 site. The region parameter is the Feature geometry of the site.
var ndbiMean_buffer2500 = ndbi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer2500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 2500 NDBI Mean: ', ndbiMean_buffer2500);


// Reduce the region for the Buffer 2000 site. The region parameter is the Feature geometry of the site.
var ndbiMean_buffer2000 = ndbi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer2000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 2000 NDBI Mean: ', ndbiMean_buffer2000);


// Reduce the region for the Buffer 1500 site. The region parameter is the Feature geometry of the site.
var ndbiMean_buffer1500 = ndbi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer1500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 1500 NDBI Mean: ', ndbiMean_buffer1500);

// Reduce the region for the Buffer 1000 site. The region parameter is the Feature geometry of the site.
var ndbiMean_buffer1000 = ndbi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer1000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 1000 NDBI Mean: ', ndbiMean_buffer1000);




// Reduce the region for the Buffer 500 site. The region parameter is the Feature geometry of the site.
var ndbiMean_buffer500 = ndbi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 500 NDBI Mean: ', ndbiMean_buffer500);



//EVI

// Reduce the region for the Laughing Brook Site. The region parameter is the Feature geometry of the site.
var eviMean_site = evi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: laughingbrook,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Laughing Brook Site EVI Mean: ', eviMean_site);


// Reduce the region for the Buffer 3000 site. The region parameter is the Feature geometry of the site.
var eviMean_buffer3000 = evi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer3000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 3000 EVI Mean: ', eviMean_buffer3000);




// Reduce the region for the Buffer 2500 site. The region parameter is the Feature geometry of the site.
var eviMean_buffer2500 = evi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer2500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 2500 EVI Mean: ', eviMean_buffer2500);


// Reduce the region for the Buffer 2000 site. The region parameter is the Feature geometry of the site.
var eviMean_buffer2000 = evi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer2000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 2000 EVI Mean: ', eviMean_buffer2000);


// Reduce the region for the Buffer 1500 site. The region parameter is the Feature geometry of the site.
var eviMean_buffer1500 = evi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer1500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 1500 EVI Mean: ', eviMean_buffer1500);

// Reduce the region for the Buffer 1000 site. The region parameter is the Feature geometry of the site.
var eviMean_buffer1000 = evi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer1000,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 1000 EVI Mean: ', eviMean_buffer1000);




// Reduce the region for the Buffer 500 site. The region parameter is the Feature geometry of the site.
var eviMean_buffer500 = evi.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: buffer500,
  scale: 30,
  maxPixels: 1e9
});

// The result is a Dictionary.  Print it.
print('Buffer 500 EVI Mean: ', eviMean_buffer500);
